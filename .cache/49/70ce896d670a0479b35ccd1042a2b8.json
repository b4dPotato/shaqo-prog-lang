{"id":"../node_modules/ast/index.js","dependencies":[{"name":"C:\\Users\\dkepel\\Folders\\WebProjects\\VanillaJs\\EggProgLang\\package.json","includedInParent":true,"mtime":1625404450315},{"name":"C:\\Users\\dkepel\\Folders\\WebProjects\\VanillaJs\\EggProgLang\\.babelrc","includedInParent":true,"mtime":1625144945267},{"name":"C:\\Users\\dkepel\\Folders\\WebProjects\\VanillaJs\\EggProgLang\\node_modules\\ast\\package.json","includedInParent":true,"mtime":1625404429160},{"name":"@babel/core","loc":{"line":6,"column":24},"parent":"C:\\Users\\dkepel\\Folders\\WebProjects\\VanillaJs\\EggProgLang\\node_modules\\ast\\index.js","resolved":"C:\\Users\\dkepel\\Folders\\WebProjects\\VanillaJs\\EggProgLang\\node_modules\\@babel\\core\\lib\\index.js"}],"generated":{"js":"/**\r\n * 编码转换，将不可读字符串转换为可读字符串 \\\r\n * \"\\u0068\\u0061\\u006e\\u006c\\u0069\\u006e\\u0067\"  ==>  \"hanling\"\r\n * @type {{NumericLiteral({node: *}): void, StringLiteral({node: *}): void}}\r\n */\r\nconst {types} = require(\"@babel/core\");\r\n\r\nconst encodingConversion =\r\n    {\r\n        NumericLiteral({node}) {\r\n            if (node.extra && /^0[obx]/i.test(node.extra.raw)) {\r\n                node.extra = undefined;\r\n            }\r\n        },\r\n        StringLiteral({node}) {\r\n            if (node.extra && /\\\\[ux]/gi.test(node.extra.raw)) {\r\n                node.extra = undefined;\r\n            }\r\n        },\r\n    }\r\n\r\n/**\r\n *\r\n * @type {{\"BinaryExpression|UnaryExpression|ConditionalExpression|CallExpression|MemberExpression|SequenceExpression\"(*): void}}\r\n */\r\nconst ConstantCalculate =\r\n    {\r\n        \"BinaryExpression|UnaryExpression|ConditionalExpression|CallExpression|MemberExpression|SequenceExpression\"(path) {\r\n            if (path.isUnaryExpression({operator: \"-\"}) || path.isUnaryExpression({operator: \"void\"})) {\r\n                return;\r\n            }\r\n            const {confident, value} = path.evaluate();\r\n            if (value == \"Infinity\" || !confident) return;\r\n            path.replaceInline(types.valueToNode(value));\r\n        },\r\n    }\r\n\r\nconst resolveSequence = {\r\n    SequenceExpression: {\r\n        exit(path){\r\n            let CondintionPath = path.findParent(p => p.isConditionalExpression());\r\n            let statement = path.getStatementParent();\r\n            if (!statement) return;\r\n            if (CondintionPath)\r\n            {\r\n                let nextCondintionPath = statement.findParent(p => p.isConditionalExpression());\r\n                if (nextCondintionPath != CondintionPath) return;\r\n            }\r\n            let expressions = path.get('expressions');\r\n            let lastExpression = expressions.pop();\r\n            for (let expression of expressions)\r\n            {\r\n                if(expression.isLiteral() ||expression.isIdentifier())\r\n                {\r\n                    expression.remove();\r\n                    continue;\r\n                }\r\n                statement.insertBefore(types.ExpressionStatement(expression=expression.node));\r\n            }\r\n            path.replaceInline(lastExpression);\r\n        }\r\n    },\r\n}\r\n\r\nexports.encodingConversion = encodingConversion\r\nexports.ConstantCalculate = ConstantCalculate\r\nexports.resolveSequence = resolveSequence"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ast/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ast/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}}],"sources":{"../node_modules/ast/index.js":"/**\r\n * 编码转换，将不可读字符串转换为可读字符串 \\\r\n * \"\\u0068\\u0061\\u006e\\u006c\\u0069\\u006e\\u0067\"  ==>  \"hanling\"\r\n * @type {{NumericLiteral({node: *}): void, StringLiteral({node: *}): void}}\r\n */\r\nconst {types} = require(\"@babel/core\");\r\n\r\nconst encodingConversion =\r\n    {\r\n        NumericLiteral({node}) {\r\n            if (node.extra && /^0[obx]/i.test(node.extra.raw)) {\r\n                node.extra = undefined;\r\n            }\r\n        },\r\n        StringLiteral({node}) {\r\n            if (node.extra && /\\\\[ux]/gi.test(node.extra.raw)) {\r\n                node.extra = undefined;\r\n            }\r\n        },\r\n    }\r\n\r\n/**\r\n *\r\n * @type {{\"BinaryExpression|UnaryExpression|ConditionalExpression|CallExpression|MemberExpression|SequenceExpression\"(*): void}}\r\n */\r\nconst ConstantCalculate =\r\n    {\r\n        \"BinaryExpression|UnaryExpression|ConditionalExpression|CallExpression|MemberExpression|SequenceExpression\"(path) {\r\n            if (path.isUnaryExpression({operator: \"-\"}) || path.isUnaryExpression({operator: \"void\"})) {\r\n                return;\r\n            }\r\n            const {confident, value} = path.evaluate();\r\n            if (value == \"Infinity\" || !confident) return;\r\n            path.replaceInline(types.valueToNode(value));\r\n        },\r\n    }\r\n\r\nconst resolveSequence = {\r\n    SequenceExpression: {\r\n        exit(path){\r\n            let CondintionPath = path.findParent(p => p.isConditionalExpression());\r\n            let statement = path.getStatementParent();\r\n            if (!statement) return;\r\n            if (CondintionPath)\r\n            {\r\n                let nextCondintionPath = statement.findParent(p => p.isConditionalExpression());\r\n                if (nextCondintionPath != CondintionPath) return;\r\n            }\r\n            let expressions = path.get('expressions');\r\n            let lastExpression = expressions.pop();\r\n            for (let expression of expressions)\r\n            {\r\n                if(expression.isLiteral() ||expression.isIdentifier())\r\n                {\r\n                    expression.remove();\r\n                    continue;\r\n                }\r\n                statement.insertBefore(types.ExpressionStatement(expression=expression.node));\r\n            }\r\n            path.replaceInline(lastExpression);\r\n        }\r\n    },\r\n}\r\n\r\nexports.encodingConversion = encodingConversion\r\nexports.ConstantCalculate = ConstantCalculate\r\nexports.resolveSequence = resolveSequence"},"lineCount":67}},"error":null,"hash":"189e1e25c107a7be0d3f84989fc64ea9","cacheData":{"env":{}}}